// 배열
public class Example09 {
    public static void main(String[] args) {
        // Array 배열
        // c, c++ <- 배열. '메모리'. &. *. -> 포인터 연산자.
        // [] -> ? ? ? ...
        // 원시타입이 아니라 참조타입.
        // 1. 길이를 선언해야하며, 길이를 한 번 선언하면 맘대로 바꿀 수 없다.
        // 2. 같은 배열 내부의 원소로 들어가는 값들은 모두 동일한 타입.
        // arr[idx] -> 0 ~ 전체 길이 - 1까지 부여된 인덱스로 개별 값을 조회, 수정.

        // 배열
        // 2개 이상 (혹은 개념상 묶여서 처리되어야하는 값들. 0개.)
        // 여러 원소를 가지는 묶음. 용기. 컨테이너.
        int[] arr1; // 권장.
        int arr2[]; // int[] arr2;
        // 타입[] 변수명.
        arr1 = new int[5]; // 변수명 = new 타입[길이];
        // 5개의 자리가 만들어짐. <arr1> 0, 1, 2, 3, 4 <= 메모리 할당되었다
        arr1[0] = 100; // 인덱스를 사용해서 데이터를 집어넣거나
        System.out.println(arr1[0]); // 호출하거나
        arr1[0] = 500; // 다시 대입해서 수정할 수 있음
        System.out.println(arr1[0]);
        arr1[1] = 111;
//        arr1[1] = "text"; // 다른 타입의 값을 넣을 수 없음.
        arr1[2] = 222;
        arr1[3] = 333;
//        arr1[4] = 444; // 원시타입의 경우에는 그 값 중에 빈 값을 의미하는 대표값
        // 숫자의 경우엔 0, 문자 ''.
//        arr1[5] = 555; // 자리가 5개인데 5 index는 안된다
        // 0부터 시작하니까! (0,1,2,3,4) -> 이 길이 - 1 만큼 반복.
        System.out.println(arr1); // 안나옴.
        // 출력을 하면 내부에 있는 값 x -> 이 배열의 '주소값'.
        System.out.println(arr1.length); // 이게 전체 배열의 길이.
        for (int i = 0; i < arr1.length; i++) {
            // i <= arr1.length => 인덱스 상 범위 넘어갔다고 에러
            arr1[i] *= 100; // 인덱스를 사용한 작업(수정. 확인...)
            System.out.println(arr1[i]);
        }
        for (int v : arr1) { // 향상된 for문의 경우엔 index가 없어서
            // 해당 인덱스를 활용한 작업 X.
            System.out.println(v); // 굳이 인덱스를 쓰지 않아도...
        }
        // new int[]{직접 요소 길이에 맞춰서 나열해서 대입}
        arr2 = new int[]{123, 234, 345, 456, 567}; // 선언 -> 할당
        int[] arr3 = {5, 4, 3, 2, 1}; // 초기화 시에는 new 타입[] 생략가능
        int[] arr4 = new int[0]; // 길이가 0인 배열도 가능하긴 함.

        // 배열
        // - 1. 출력 시에는 무조건 for을 써야하나요? x
        // - 2. 배열은 꼭 한 단계로만 작성해야하나요? x
    }
}
